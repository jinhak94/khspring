/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2021-05-03 06:27:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.menu;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class menu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1618466661495L));
    _jspx_dependants.put("jar:file:/C:/Workspaces/spring_workspace/hello-spring/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fn.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("jar:file:/C:/Workspaces/spring_workspace/hello-spring/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("jar:file:/C:/Workspaces/spring_workspace/hello-spring/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fmt.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005frequestEncoding_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ffmt_005frequestEncoding_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ffmt_005frequestEncoding_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_fmt_005frequestEncoding_005f0(_jspx_page_context))
        return;
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("메뉴REST", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("div#menu-container{text-align:center;}\r\n");
      out.write("div.menu-test{width:50%; margin:0 auto; text-align:center;}\r\n");
      out.write("div.result{width:70%; margin:0 auto;}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("const menuRestApiHost = \"http://localhost:10000/springboot\";\r\n");
      out.write("\r\n");
      out.write("function displayResultTable(selector, data){\r\n");
      out.write("\tconst $container = $(selector);\r\n");
      out.write("\tconst $table = $(\"<table></table>\").addClass(\"table\");\r\n");
      out.write("\tconst $header = $(\"<tr><th>번호</th><th>음식점</th><th>메뉴명</th><th>가격</th><th>타입</th><th>맛</th></tr>\")\r\n");
      out.write("\t$table.append($header);\r\n");
      out.write("\t\r\n");
      out.write("\tif(data.length>0){\t\t\r\n");
      out.write("\t\t$(data).each((i, {id, restaurant, name, price, type, taste}) => {\r\n");
      out.write("\t//\t\tconsole.log(i, menu);\r\n");
      out.write("\t\t\tconst tr = `<tr>\r\n");
      out.write("\t\t\t\t<td>${id}</td>\r\n");
      out.write("\t\t\t\t<td>${restaurant}</td>\r\n");
      out.write("\t\t\t\t<td>${name}</td>\r\n");
      out.write("\t\t\t\t<td>${price}</td>\r\n");
      out.write("\t\t\t\t<td>${type}</td>\r\n");
      out.write("\t\t\t\t<td>${taste}</td>\r\n");
      out.write("\t\t\t</tr>`;\r\n");
      out.write("\t\t\t$table.append(tr);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}else{\r\n");
      out.write("\t\t$table.append(\"<tr><td colspan='6'>조회된 결과가 없습니다.</td></tr>\");\r\n");
      out.write("\t}\r\n");
      out.write("\t$container.html($table);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<div id=\"menu-container\">\r\n");
      out.write("      <!-- 1.GET menus-->\r\n");
      out.write("     <div class=\"menu-test\">\r\n");
      out.write("         <h4>전체메뉴조회(GET)</h4>\r\n");
      out.write("         <input type=\"button\" class=\"btn btn-block btn-outline-success btn-send\" id=\"btn-menus\" value=\"전송\" />\r\n");
      out.write("     </div>\r\n");
      out.write("     <div class=\"result\" id=\"menus-result\"></div>\r\n");
      out.write("     <script>\r\n");
      out.write("     /**\r\n");
      out.write("     * Access to XMLHttpRequest at 'http://localhost:10000/springboot/menus'\r\n");
      out.write("     from origin 'http://localhost:9090' \r\n");
      out.write("     has been blocked \r\n");
      out.write("     by CORS policy: \r\n");
      out.write("    \t No 'Access-Control-Allow-Origin' header is present on the requested resource.\r\n");
      out.write("     *\r\n");
      out.write("     * SOP : Same Origin Policy 동일근원정책\r\n");
      out.write("\t * 비동기 요청시 같은 Origin으로만 요청을 보낼 수 있다.\r\n");
      out.write("     * origin : protocol + host + post\r\n");
      out.write("     * \t\t\thttp://\t localhost  :9090\r\n");
      out.write("     \r\n");
      out.write("     * CORS Cross Origin Resource Sharing\r\n");
      out.write("     * 응답헤더에 Access-Control-Allow-Origin에\r\n");
      out.write("     * 현재 Origin을 허용할때는 CORS가 가능하다.\r\n");
      out.write("     * Access-Control-Allow-Origin : http://localhost:9090\r\n");
      out.write("     * Access-Control-Allow-Origin : * (모든 요청에 대해 Origin 허용)     \r\n");
      out.write("     */\r\n");
      out.write("        \t$(\"#btn-menus\").click(e => {\r\n");
      out.write("        \t\t$.ajax({\r\n");
      out.write("        \t\t\turl: `${menuRestApiHost}/menus`,\r\n");
      out.write("        \t\t\tmethod: \"GET\",\r\n");
      out.write("        \t\t\tdataType: \"json\",\r\n");
      out.write("        \t\t\tsuccess: data => {\r\n");
      out.write("        \t\t\t\tconsole.log(data);\r\n");
      out.write("        \t\t\t\tdisplayResultTable(\"#menus-result\", data);\r\n");
      out.write("        \t\t\t},\r\n");
      out.write("//         \t\t\terror: (xhr, status, err) => console.log(xhr, status, err);\r\n");
      out.write("        \t\t\terror: console.log\r\n");
      out.write("        \t\t});\r\n");
      out.write("        \t});\r\n");
      out.write("        </script>\t\r\n");
      out.write(" </div>\r\n");
      out.write("  <!-- 2.GET /menus/kr /menus/ch /menus/jp 타입별 조회 -->\r\n");
      out.write("<div class=\"menu-test\">\r\n");
      out.write("           <h4>메뉴 타입별 조회(GET)</h4>\r\n");
      out.write("           <select class=\"form-control\" id=\"typeSelector\">\r\n");
      out.write("           <option value=\"\" disabled selected>음식타입선택</option>\r\n");
      out.write("           <option value=\"kr\">한식</option>\r\n");
      out.write("           <option value=\"ch\">중식</option>\r\n");
      out.write("           <option value=\"jp\">일식</option>\r\n");
      out.write("           </select>\r\n");
      out.write("       </div>\r\n");
      out.write("       <div class=\"result\" id=\"menuType-result\"></div>\r\n");
      out.write("       <script>\r\n");
      out.write("        \t$(\"#typeSelector\").change(({target:{value}}) => {\r\n");
      out.write("        \t\t$.ajax({\r\n");
      out.write("        \t\t\turl: `${menuRestApiHost}/menus/${value}`,\r\n");
      out.write("        \t\t\tmethod: \"GET\",\r\n");
      out.write("        \t\t\tdataType: \"json\",\r\n");
      out.write("        \t\t\tsuccess: data => {\r\n");
      out.write("        \t\t\t\tconsole.log(data);\r\n");
      out.write("        \t\t\t\tdisplayResultTable(\"#menuType-result\", data);\r\n");
      out.write("        \t\t\t},\r\n");
      out.write("//         \t\t\terror: (xhr, status, err) => console.log(xhr, status, err);\r\n");
      out.write("        \t\t\terror: console.log\r\n");
      out.write("        \t\t});\r\n");
      out.write("        \t});\r\n");
      out.write("        \r\n");
      out.write("        </script>\r\n");
      out.write("     \r\n");
      out.write("            <!-- 2.POST -->\r\n");
      out.write("<div class=\"menu-test\">\r\n");
      out.write("\t<h4>메뉴 등록하기(POST)</h4>\r\n");
      out.write("\t<form id=\"menuEnrollFrm\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"restaurant\" placeholder=\"음식점\" class=\"form-control\" />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"text\" name=\"name\" placeholder=\"메뉴\" class=\"form-control\" />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"number\" name=\"price\" placeholder=\"가격\" class=\"form-control\" />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<div class=\"form-check form-check-inline\">\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"type\" id=\"post-kr\" value=\"kr\" checked>\r\n");
      out.write("\t\t\t<label for=\"post-kr\" class=\"form-check-label\">한식</label>&nbsp;\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"type\" id=\"post-ch\" value=\"ch\">\r\n");
      out.write("\t\t\t<label for=\"post-ch\" class=\"form-check-label\">중식</label>&nbsp;\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"type\" id=\"post-jp\" value=\"jp\">\r\n");
      out.write("\t\t\t<label for=\"post-jp\" class=\"form-check-label\">일식</label>&nbsp;\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<div class=\"form-check form-check-inline\">\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"taste\" id=\"post-hot\" value=\"hot\" checked>\r\n");
      out.write("\t\t\t<label for=\"post-hot\" class=\"form-check-label\">매운맛</label>&nbsp;\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"taste\" id=\"post-mild\" value=\"mild\">\r\n");
      out.write("\t\t\t<label for=\"post-mild\" class=\"form-check-label\">순한맛</label>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"submit\" class=\"btn btn-block btn-outline-success btn-send\" value=\"등록\" >\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("$(\"#menuEnrollFrm\").submit(e => {\r\n");
      out.write("\t// 폼 제출 방지\r\n");
      out.write("\te.preventDefault();\r\n");
      out.write("\t\r\n");
      out.write("\tconst restaurant = $(\"[name=restaurant]\", e.target).val();\r\n");
      out.write("\tconst name = $(\"[name=name]\", e.target).val();\r\n");
      out.write("\tconst price = Number($(\"[name=price]\", e.target).val());\r\n");
      out.write("\tconst type = $(\"[name=type]:checked\", e.target).val();\r\n");
      out.write("\tconst taste = $(\"[name=taste]:checked\", e.target).val();\r\n");
      out.write("\tconsole.log(restaurant, name, price);\r\n");
      out.write("\r\n");
      out.write("\t//유효성검사\r\n");
      out.write("\tif(!restaurant || !name || !price){\r\n");
      out.write("\t\talert(\"입력폼을 모두 작성하세요.\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tconst menu = {restaurant, name, price, type, taste};\r\n");
      out.write("\tconsole.log(menu);\r\n");
      out.write("\t\r\n");
      out.write("\t//서버에 json 형식으로 데이터 전달(요청메세지 body)\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl:  `${menuRestApiHost}/menu`,\r\n");
      out.write("\t\tmethod: \"POST\",\r\n");
      out.write("\t\tdata: JSON.stringify(menu),\r\n");
      out.write("\t\tcontentType: \"application/json; charset=utf-8\",\r\n");
      out.write("\t\tsuccess({msg}){\r\n");
      out.write("\t\t\talert(msg);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\terror(xhr, status, err){\r\n");
      out.write("\t\t\tconsole.log(xhr, status, err);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tcomplete(){\r\n");
      out.write("\t\t\t$(e.target)[0].reset();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\t\t\t\t\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\t<!-- #3.PUT -->\r\n");
      out.write("<!-- @실습문제 : GET /menu/3 조회후, #menuUpdateFrm에 데이터 시각화할 것 \r\n");
      out.write("\t 존재하지 않는 메뉴인경우, 404을 응답하고, 사용자 피드백줄것.-->\r\n");
      out.write("<div class=\"menu-test\">\r\n");
      out.write("\t<h4>메뉴 수정하기(PUT)</h4>\r\n");
      out.write("\t<p>메뉴번호를 사용해 해당메뉴정보를 수정함.</p>\r\n");
      out.write("\t<form id=\"menuSearchFrm\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"id\" placeholder=\"메뉴번호\" class=\"form-control\" /><br />\r\n");
      out.write("\t\t<input type=\"submit\" class=\"btn btn-block btn-outline-primary btn-send\" value=\"검색\" >\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<form id=\"menuUpdateFrm\">\r\n");
      out.write("\t\t<!-- where조건절에 사용할 id를 담아둠 -->\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"id\" />\r\n");
      out.write("\t\t<input type=\"text\" name=\"restaurant\" placeholder=\"음식점\" class=\"form-control\" />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"text\" name=\"name\" placeholder=\"메뉴\" class=\"form-control\" />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"number\" name=\"price\" placeholder=\"가격\" step=\"1000\" class=\"form-control\" />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<div class=\"form-check form-check-inline\">\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"type\" id=\"put-kr\" value=\"kr\" checked>\r\n");
      out.write("\t\t\t<label for=\"put-kr\" class=\"form-check-label\">한식</label>&nbsp;\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"type\" id=\"put-ch\" value=\"ch\">\r\n");
      out.write("\t\t\t<label for=\"put-ch\" class=\"form-check-label\">중식</label>&nbsp;\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"type\" id=\"put-jp\" value=\"jp\">\r\n");
      out.write("\t\t\t<label for=\"put-jp\" class=\"form-check-label\">일식</label>&nbsp;\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<div class=\"form-check form-check-inline\">\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"taste\" id=\"put-hot\" value=\"hot\" checked>\r\n");
      out.write("\t\t\t<label for=\"put-hot\" class=\"form-check-label\">매운맛</label>&nbsp;\r\n");
      out.write("\t\t\t<input type=\"radio\" class=\"form-check-input\" name=\"taste\" id=\"put-mild\" value=\"mild\">\r\n");
      out.write("\t\t\t<label for=\"put-mild\" class=\"form-check-label\">순한맛</label>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"submit\" class=\"btn btn-block btn-outline-success btn-send\" value=\"수정\" >\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("$(menuUpdateFrm).submit(e => {\r\n");
      out.write("\te.preventDefault();\r\n");
      out.write("\tconst $frm = $(e.target);\r\n");
      out.write("\tconst id = Number($frm.find(\"[name=id]\").val());\r\n");
      out.write("\tconst restaurant = $frm.find(\"[name=restaurant]\").val();\r\n");
      out.write("\tconst name = $frm.find(\"[name=name]\").val();\r\n");
      out.write("\tconst price = Number($frm.find(\"[name=price]\").val());\r\n");
      out.write("\tconst type = $frm.find(\"[name=type]:checked\").val();\r\n");
      out.write("\tconst taste = $frm.find(\"[name=taste]:checked\").val();\r\n");
      out.write("\tconst menu = {id, restaurant, name, price, type, taste};\r\n");
      out.write("\tconsole.log(\"menu = \", menu);\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: `${menuRestApiHost}/menu`,\r\n");
      out.write("\t\tdata: JSON.stringify(menu),\r\n");
      out.write("\t\tcontentType: \"application/json; charset=utf-8\",\r\n");
      out.write("\t\tmethod: \"PUT\",\r\n");
      out.write("\t\tsuccess(data){\r\n");
      out.write("\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\tconst {msg} = data;\r\n");
      out.write("\t\t\talert(msg);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\terror(xhr, status, err){\r\n");
      out.write("\t\t\talert(\"메뉴 수정 오류 : \" + status);\r\n");
      out.write("\t\t\tconsole.log(xhr, status, err);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tcomplete(){\r\n");
      out.write("\t\t\t$frm[0].reset();\r\n");
      out.write("\t\t\t$(menuSearchFrm)[0].reset();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$(\"#menuSearchFrm\").submit(e =>{\r\n");
      out.write("\te.preventDefault(); // 폼 제출방지\r\n");
      out.write("\tconst id = $(\"[name=id]\", e.target).val();\r\n");
      out.write("\tif(!id) return;\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl:  `${menuRestApiHost}/menu/${id}`,\r\n");
      out.write("\t\tmethod: \"GET\",\r\n");
      out.write("\t\tdata: id,\r\n");
      out.write("\t\tsuccess(data){\r\n");
      out.write("\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\tconst $frm = $(menuUpdateFrm);\r\n");
      out.write("\t\t\tconst {id, restaurant, name, price, type, taste} = data;\r\n");
      out.write("\t\t\t$frm.find(\"[name=id]\").val(id);\r\n");
      out.write("\t\t\t$frm.find(\"[name=restaurant]\").val(restaurant);\r\n");
      out.write("\t\t\t$frm.find(\"[name=name]\").val(name);\r\n");
      out.write("\t\t\t$frm.find(\"[name=price]\").val(price);\r\n");
      out.write("\t\t\t$frm.find(`[name=type][value=${type}]`).prop(\"checked\", true);\r\n");
      out.write("\t\t\t$frm.find(`[name=taste][value=${taste}]`).prop(\"checked\", true);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\terror(xhr, statusText, err){\r\n");
      out.write("\t\t\tconsole.log(xhr, statusText, err);\r\n");
      out.write("\t\t\tconst {status} = xhr;\r\n");
      out.write("\t\t\t//짧은 조건문, 좌항 true인 경우에 우항 실행\r\n");
      out.write("\t\t\tstatus === 404 && alert(\"조회한 메뉴는 존재하지 않습니다.\");\r\n");
      out.write("\t\t\t$(\"[name=id]\", e.target).select();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("   \r\n");
      out.write("   <!-- @실습문제: DELETE /menu/3 -->\r\n");
      out.write("<div class=\"menu-test\">\r\n");
      out.write("\t<h4>메뉴 삭제하기(DELETE)</h4>\r\n");
      out.write("\t<p>메뉴번호를 사용해 해당메뉴정보를 삭제함.</p>\r\n");
      out.write("\t<form id=\"menuDeleteFrm\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"id\" placeholder=\"메뉴번호\" class=\"form-control\" /><br />\r\n");
      out.write("\t\t<input type=\"submit\" class=\"btn btn-block btn-outline-danger btn-send\" value=\"삭제\" >\r\n");
      out.write("\t</form>\r\n");
      out.write(" </div>\r\n");
      out.write(" <script>\r\n");
      out.write("    $(\"#menuDeleteFrm\").submit(e => {\r\n");
      out.write("   \te.preventDefault();\r\n");
      out.write("   \tconst id = Number($(\"[name=id]\", e.target).val());\r\n");
      out.write("   \tif(!id) return;\r\n");
      out.write("   \t$.ajax({\r\n");
      out.write("   \t\turl:  `${menuRestApiHost}/menu/${id}`,\r\n");
      out.write("   \t\tmethod: \"DELETE\",\r\n");
      out.write("   \t\tdata: id,\r\n");
      out.write("   \t\tsuccess(data){\r\n");
      out.write("\t\t\tconst {msg} = data;\r\n");
      out.write("\t\t\talert(msg);\r\n");
      out.write("   \t\t},\r\n");
      out.write("\t\terror(xhr, statusText, err){\r\n");
      out.write("\t\t\tconst {status} = xhr;\r\n");
      out.write("\t\t\tswitch(status){\r\n");
      out.write("\t\t\t\tcase 404: alert(\"해당 메뉴는 존재하지 않습니다.\"); break;\r\n");
      out.write("\t\t\t\tdefault: alert(\"메뉴 삭제 실패 : \" + statusText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\t\t//alert(\"메뉴 삭제 오류 : \" + status);\r\n");
      out.write("\t\t\t\tconsole.log(xhr, status, err);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("              complete(){\r\n");
      out.write("                 e.target.reset(); //폼초기화\r\n");
      out.write("\t\t\t\t\t\t  //$(menuSearchFrm)[0].reset();\r\n");
      out.write("\r\n");
      out.write("\t\t\t}\r\n");
      out.write("    \t})\r\n");
      out.write("     });\r\n");
      out.write("\t\t     </script>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("   <footer>\r\n");
      out.write("      <p>&lt;Copyright 2017. <strong>KH정보교육원</strong>. All rights reserved.&gt;</p>\r\n");
      out.write("   </footer>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/footer.jsp", out, false);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005frequestEncoding_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:requestEncoding
    org.apache.taglibs.standard.tag.rt.fmt.RequestEncodingTag _jspx_th_fmt_005frequestEncoding_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.RequestEncodingTag) _005fjspx_005ftagPool_005ffmt_005frequestEncoding_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.RequestEncodingTag.class);
    boolean _jspx_th_fmt_005frequestEncoding_005f0_reused = false;
    try {
      _jspx_th_fmt_005frequestEncoding_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005frequestEncoding_005f0.setParent(null);
      // /WEB-INF/views/menu/menu.jsp(6,0) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005frequestEncoding_005f0.setValue("utf-8");
      int _jspx_eval_fmt_005frequestEncoding_005f0 = _jspx_th_fmt_005frequestEncoding_005f0.doStartTag();
      if (_jspx_th_fmt_005frequestEncoding_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005frequestEncoding_0026_005fvalue_005fnobody.reuse(_jspx_th_fmt_005frequestEncoding_005f0);
      _jspx_th_fmt_005frequestEncoding_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005frequestEncoding_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005frequestEncoding_005f0_reused);
    }
    return false;
  }
}
